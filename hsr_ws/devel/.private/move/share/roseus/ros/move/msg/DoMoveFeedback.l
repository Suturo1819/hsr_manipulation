;; Auto-generated. Do not edit!


(when (boundp 'move::DoMoveFeedback)
  (if (not (find-package "MOVE"))
    (make-package "MOVE"))
  (shadow 'DoMoveFeedback (find-package "MOVE")))
(unless (find-package "MOVE::DOMOVEFEEDBACK")
  (make-package "MOVE::DOMOVEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude DoMoveFeedback.msg.html


(defclass move::DoMoveFeedback
  :super ros::object
  :slots (_feedback_msg ))

(defmethod move::DoMoveFeedback
  (:init
   (&key
    ((:feedback_msg __feedback_msg) "")
    )
   (send-super :init)
   (setq _feedback_msg (string __feedback_msg))
   self)
  (:feedback_msg
   (&optional __feedback_msg)
   (if __feedback_msg (setq _feedback_msg __feedback_msg)) _feedback_msg)
  (:serialization-length
   ()
   (+
    ;; string _feedback_msg
    4 (length _feedback_msg)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _feedback_msg
       (write-long (length _feedback_msg) s) (princ _feedback_msg s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _feedback_msg
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _feedback_msg (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get move::DoMoveFeedback :md5sum-) "c2d0a7665728d7af4a27ddb9a948c8e6")
(setf (get move::DoMoveFeedback :datatype-) "move/DoMoveFeedback")
(setf (get move::DoMoveFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# define feedback
string feedback_msg


")



(provide :move/DoMoveFeedback "c2d0a7665728d7af4a27ddb9a948c8e6")


