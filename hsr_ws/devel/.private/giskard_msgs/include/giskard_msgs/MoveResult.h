// Generated by gencpp from file giskard_msgs/MoveResult.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_MOVERESULT_H
#define GISKARD_MSGS_MESSAGE_MOVERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectory.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct MoveResult_
{
  typedef MoveResult_<ContainerAllocator> Type;

  MoveResult_()
    : error_code(0)
    , trajectory()  {
    }
  MoveResult_(const ContainerAllocator& _alloc)
    : error_code(0)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;



  enum {
    SUCCESS = 0u,
    INSOLVABLE = 1u,
    PATH_COLLISION = 2u,
    START_STATE_COLLISION = 3u,
    END_STATE_COLLISION = 4u,
    SOLVER_TIMEOUT = 5u,
    INTERRUPTED = 6u,
    MAX_NWSR_REACHED = 7u,
    QP_SOLVER_ERROR = 8u,
    UNKNOWN_OBJECT = 9u,
    SYMENGINE_ERROR = 10u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::MoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::MoveResult_<ContainerAllocator> const> ConstPtr;

}; // struct MoveResult_

typedef ::giskard_msgs::MoveResult_<std::allocator<void> > MoveResult;

typedef boost::shared_ptr< ::giskard_msgs::MoveResult > MoveResultPtr;
typedef boost::shared_ptr< ::giskard_msgs::MoveResult const> MoveResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::MoveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::MoveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30a5ca36aa9d78817486028053bcba3f";
  }

  static const char* value(const ::giskard_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30a5ca36aa9d7881ULL;
  static const uint64_t static_value2 = 0x7486028053bcba3fULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/MoveResult";
  }

  static const char* value(const ::giskard_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::MoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
# definition of possible error code values\n\
uint8 SUCCESS=0\n\
uint8 INSOLVABLE=1\n\
uint8 PATH_COLLISION=2\n\
uint8 START_STATE_COLLISION=3\n\
uint8 END_STATE_COLLISION=4\n\
uint8 SOLVER_TIMEOUT=5\n\
uint8 INTERRUPTED=6\n\
uint8 MAX_NWSR_REACHED=7 # increasing NWSR might fix this\n\
uint8 QP_SOLVER_ERROR=8\n\
uint8 UNKNOWN_OBJECT=9\n\
uint8 SYMENGINE_ERROR=10\n\
\n\
# error codes for the overall action goal\n\
uint8 error_code\n\
\n\
# planned trajectory\n\
trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
# Each trajectory point specifies either positions[, velocities[, accelerations]]\n\
# or positions[, effort] for the trajectory to be executed.\n\
# All specified values are in the same order as the joint names in JointTrajectory.msg\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
";
  }

  static const char* value(const ::giskard_msgs::MoveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::MoveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::MoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::MoveResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_MOVERESULT_H
