// Generated by gencpp from file giskard_msgs/WholeBodyResult.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_WHOLEBODYRESULT_H
#define GISKARD_MSGS_MESSAGE_WHOLEBODYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <giskard_msgs/WholeBodyState.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct WholeBodyResult_
{
  typedef WholeBodyResult_<ContainerAllocator> Type;

  WholeBodyResult_()
    : state()  {
    }
  WholeBodyResult_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::giskard_msgs::WholeBodyState_<ContainerAllocator>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> const> ConstPtr;

}; // struct WholeBodyResult_

typedef ::giskard_msgs::WholeBodyResult_<std::allocator<void> > WholeBodyResult;

typedef boost::shared_ptr< ::giskard_msgs::WholeBodyResult > WholeBodyResultPtr;
typedef boost::shared_ptr< ::giskard_msgs::WholeBodyResult const> WholeBodyResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::WholeBodyResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "116144890e2eab71ae9010a22d3d9149";
  }

  static const char* value(const ::giskard_msgs::WholeBodyResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x116144890e2eab71ULL;
  static const uint64_t static_value2 = 0xae9010a22d3d9149ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/WholeBodyResult";
  }

  static const char* value(const ::giskard_msgs::WholeBodyResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
giskard_msgs/WholeBodyState state\n\
\n\
================================================================================\n\
MSG: giskard_msgs/WholeBodyState\n\
# only using timestamp for the moment\n\
std_msgs/Header header\n\
\n\
# feature values used to make decisions about succeeded actions\n\
duration running_time\n\
float64 left_arm_max_vel\n\
float64 right_arm_max_vel\n\
float64 torso_vel\n\
giskard_msgs/SemanticFloat64[] convergence_values # internal values used to decide convergence\n\
\n\
# classification results used to decide whether action succeeded\n\
bool motion_started # true, as soon low-level controller has started execution the command\n\
bool motion_old # true, if time passed since start of motion is above threshold\n\
bool torso_moving # true, if torso velocity is above threshold\n\
bool left_arm_moving # true, if velocity of any joint of left arm is above threshold\n\
bool right_arm_moving # true, if velocity of any joint of right arm is above threshold\n\
giskard_msgs/SemanticBool[] convergence_flags # true, if the corresponding feature values are below a threshold\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: giskard_msgs/SemanticFloat64\n\
# A floating-point with semantics hint attached.\n\
# Note: I know this is not much but better than just the number. ;)\n\
\n\
# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.\n\
string semantics\n\
# The actual value communicated.\n\
float64 value\n\
\n\
================================================================================\n\
MSG: giskard_msgs/SemanticBool\n\
# A bool with semantics hint attached.\n\
# Note: I know this is not much but better than just the bool. ;)\n\
\n\
# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.\n\
string semantics\n\
# The actual value communicated.\n\
bool value\n\
";
  }

  static const char* value(const ::giskard_msgs::WholeBodyResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WholeBodyResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::WholeBodyResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::WholeBodyResult_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::giskard_msgs::WholeBodyState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_WHOLEBODYRESULT_H
