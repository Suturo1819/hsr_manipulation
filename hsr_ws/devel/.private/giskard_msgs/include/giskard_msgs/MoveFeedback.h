// Generated by gencpp from file giskard_msgs/MoveFeedback.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_MOVEFEEDBACK_H
#define GISKARD_MSGS_MESSAGE_MOVEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace giskard_msgs
{
template <class ContainerAllocator>
struct MoveFeedback_
{
  typedef MoveFeedback_<ContainerAllocator> Type;

  MoveFeedback_()
    : phase(0)
    , progress(0.0)  {
    }
  MoveFeedback_(const ContainerAllocator& _alloc)
    : phase(0)
    , progress(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _phase_type;
  _phase_type phase;

   typedef double _progress_type;
  _progress_type progress;



  enum {
    UNDEFINED = 0u,
    INIT_KINEMATIC_CHAIN = 1u,
    PLANNING = 2u,
    EXECUTION = 3u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::MoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::MoveFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MoveFeedback_

typedef ::giskard_msgs::MoveFeedback_<std::allocator<void> > MoveFeedback;

typedef boost::shared_ptr< ::giskard_msgs::MoveFeedback > MoveFeedbackPtr;
typedef boost::shared_ptr< ::giskard_msgs::MoveFeedback const> MoveFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::MoveFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecc6d4879c8c02bbc72b1e25251d42be";
  }

  static const char* value(const ::giskard_msgs::MoveFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecc6d4879c8c02bbULL;
  static const uint64_t static_value2 = 0xc72b1e25251d42beULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/MoveFeedback";
  }

  static const char* value(const ::giskard_msgs::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# feedback\n\
\n\
# definitions of possible action phases\n\
uint8 UNDEFINED=0\n\
uint8 INIT_KINEMATIC_CHAIN=1 # not implemented\n\
uint8 PLANNING=2\n\
uint8 EXECUTION=3\n\
\n\
# action phase that the server currently pursues\n\
uint8 phase\n\
\n\
# value between 0.0 and 1.0 to report progress \n\
# only published during phases EXECUTION\n\
float64 progress\n\
\n\
";
  }

  static const char* value(const ::giskard_msgs::MoveFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.phase);
      stream.next(m.progress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::MoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::MoveFeedback_<ContainerAllocator>& v)
  {
    s << indent << "phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.phase);
    s << indent << "progress: ";
    Printer<double>::stream(s, indent + "  ", v.progress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_MOVEFEEDBACK_H
