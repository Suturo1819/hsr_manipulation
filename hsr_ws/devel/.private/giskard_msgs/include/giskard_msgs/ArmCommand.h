// Generated by gencpp from file giskard_msgs/ArmCommand.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_ARMCOMMAND_H
#define GISKARD_MSGS_MESSAGE_ARMCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <giskard_msgs/SemanticFloat64.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct ArmCommand_
{
  typedef ArmCommand_<ContainerAllocator> Type;

  ArmCommand_()
    : type(0)
    , goal_pose()
    , goal_configuration()
    , convergence_thresholds()  {
    }
  ArmCommand_(const ContainerAllocator& _alloc)
    : type(0)
    , goal_pose(_alloc)
    , goal_configuration(_alloc)
    , convergence_thresholds(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_configuration_type;
  _goal_configuration_type goal_configuration;

   typedef std::vector< ::giskard_msgs::SemanticFloat64_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::giskard_msgs::SemanticFloat64_<ContainerAllocator> >::other >  _convergence_thresholds_type;
  _convergence_thresholds_type convergence_thresholds;



  enum {
    IGNORE_GOAL = 0u,
    CARTESIAN_GOAL = 1u,
    JOINT_GOAL = 2u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::ArmCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::ArmCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ArmCommand_

typedef ::giskard_msgs::ArmCommand_<std::allocator<void> > ArmCommand;

typedef boost::shared_ptr< ::giskard_msgs::ArmCommand > ArmCommandPtr;
typedef boost::shared_ptr< ::giskard_msgs::ArmCommand const> ArmCommandConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::ArmCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::ArmCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::ArmCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::ArmCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::ArmCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41a9ac8c4e1e8072ebaff33076861080";
  }

  static const char* value(const ::giskard_msgs::ArmCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41a9ac8c4e1e8072ULL;
  static const uint64_t static_value2 = 0xebaff33076861080ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/ArmCommand";
  }

  static const char* value(const ::giskard_msgs::ArmCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A command message for robotic manipulators that exposes a couple\n\
# of alternative ways of specifying commands.\n\
\n\
# Definitions of possible values used for type\n\
uint8 IGNORE_GOAL=0 # Ignore the rest of this command.\n\
uint8 CARTESIAN_GOAL=1 # Use the PoseStamped.\n\
uint8 JOINT_GOAL=2 # Use the list of floats.\n\
\n\
# use one of the above constants to indicate the type of command\n\
uint8 type\n\
\n\
# Cartesian goal for the arm.\n\
# Note: The header will be used to resolve goal using tf.\n\
geometry_msgs/PoseStamped goal_pose\n\
\n\
# Joint goal for the arm.\n\
float64[] goal_configuration\n\
\n\
# List of internal double expressions with thresholds to decide convergence\n\
giskard_msgs/SemanticFloat64[] convergence_thresholds\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: giskard_msgs/SemanticFloat64\n\
# A floating-point with semantics hint attached.\n\
# Note: I know this is not much but better than just the number. ;)\n\
\n\
# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.\n\
string semantics\n\
# The actual value communicated.\n\
float64 value\n\
";
  }

  static const char* value(const ::giskard_msgs::ArmCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.goal_pose);
      stream.next(m.goal_configuration);
      stream.next(m.convergence_thresholds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::ArmCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::ArmCommand_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "goal_configuration[]" << std::endl;
    for (size_t i = 0; i < v.goal_configuration.size(); ++i)
    {
      s << indent << "  goal_configuration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_configuration[i]);
    }
    s << indent << "convergence_thresholds[]" << std::endl;
    for (size_t i = 0; i < v.convergence_thresholds.size(); ++i)
    {
      s << indent << "  convergence_thresholds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::giskard_msgs::SemanticFloat64_<ContainerAllocator> >::stream(s, indent + "    ", v.convergence_thresholds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_ARMCOMMAND_H
