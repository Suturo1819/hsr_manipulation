// Generated by gencpp from file giskard_msgs/Constraint.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_CONSTRAINT_H
#define GISKARD_MSGS_MESSAGE_CONSTRAINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace giskard_msgs
{
template <class ContainerAllocator>
struct Constraint_
{
  typedef Constraint_<ContainerAllocator> Type;

  Constraint_()
    : name()
    , lower(0.0)
    , upper(0.0)  {
    }
  Constraint_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , lower(0.0)
    , upper(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _lower_type;
  _lower_type lower;

   typedef double _upper_type;
  _upper_type upper;





  typedef boost::shared_ptr< ::giskard_msgs::Constraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::Constraint_<ContainerAllocator> const> ConstPtr;

}; // struct Constraint_

typedef ::giskard_msgs::Constraint_<std::allocator<void> > Constraint;

typedef boost::shared_ptr< ::giskard_msgs::Constraint > ConstraintPtr;
typedef boost::shared_ptr< ::giskard_msgs::Constraint const> ConstraintConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::Constraint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::Constraint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Constraint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Constraint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Constraint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Constraint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Constraint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Constraint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::Constraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b108bdb410bd66d771fb782664678118";
  }

  static const char* value(const ::giskard_msgs::Constraint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb108bdb410bd66d7ULL;
  static const uint64_t static_value2 = 0x71fb782664678118ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::Constraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/Constraint";
  }

  static const char* value(const ::giskard_msgs::Constraint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::Constraint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# a string identifying the expression behind the constraint\n\
string name\n\
\n\
# desired lower and upper boundaries that shall be enforced\n\
float64 lower\n\
float64 upper\n\
";
  }

  static const char* value(const ::giskard_msgs::Constraint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::Constraint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.lower);
      stream.next(m.upper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Constraint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::Constraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::Constraint_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "lower: ";
    Printer<double>::stream(s, indent + "  ", v.lower);
    s << indent << "upper: ";
    Printer<double>::stream(s, indent + "  ", v.upper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_CONSTRAINT_H
