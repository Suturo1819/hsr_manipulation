// Generated by gencpp from file giskard_msgs/WorldBody.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_WORLDBODY_H
#define GISKARD_MSGS_MESSAGE_WORLDBODY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <shape_msgs/SolidPrimitive.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct WorldBody_
{
  typedef WorldBody_<ContainerAllocator> Type;

  WorldBody_()
    : type(0)
    , name()
    , shape()
    , mesh()
    , urdf()
    , joint_state_topic()  {
    }
  WorldBody_(const ContainerAllocator& _alloc)
    : type(0)
    , name(_alloc)
    , shape(_alloc)
    , mesh(_alloc)
    , urdf(_alloc)
    , joint_state_topic(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::shape_msgs::SolidPrimitive_<ContainerAllocator>  _shape_type;
  _shape_type shape;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mesh_type;
  _mesh_type mesh;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _urdf_type;
  _urdf_type urdf;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_state_topic_type;
  _joint_state_topic_type joint_state_topic;



  enum {
    UNDEFINED = 0u,
    PRIMITIVE_BODY = 1u,
    MESH_BODY = 2u,
    URDF_BODY = 3u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::WorldBody_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::WorldBody_<ContainerAllocator> const> ConstPtr;

}; // struct WorldBody_

typedef ::giskard_msgs::WorldBody_<std::allocator<void> > WorldBody;

typedef boost::shared_ptr< ::giskard_msgs::WorldBody > WorldBodyPtr;
typedef boost::shared_ptr< ::giskard_msgs::WorldBody const> WorldBodyConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::WorldBody_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::WorldBody_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::WorldBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::WorldBody_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::WorldBody_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::WorldBody_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::WorldBody_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::WorldBody_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::WorldBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f763aeaaddb71192fb2371cfede6d783";
  }

  static const char* value(const ::giskard_msgs::WorldBody_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf763aeaaddb71192ULL;
  static const uint64_t static_value2 = 0xfb2371cfede6d783ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::WorldBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/WorldBody";
  }

  static const char* value(const ::giskard_msgs::WorldBody_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::WorldBody_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Representation of a single body into the world \n\
\n\
# Possible constants to fill into the type field\n\
uint8 UNDEFINED=0\n\
uint8 PRIMITIVE_BODY=1\n\
uint8 MESH_BODY=2\n\
uint8 URDF_BODY=3\n\
\n\
# The type of body that is represented\n\
uint8 type\n\
\n\
# The name with which the body shall be addressed in the world\n\
# Note: needs to be unique. If the name is already taken, an error will be returned\n\
string name\n\
\n\
# Only used if type==PRIMITIVE_BODY, otherwise ignored.\n\
shape_msgs/SolidPrimitive shape\n\
\n\
# Only used if type==MESH_BODY, otherwise ignored. \n\
# Needs to be a ROS resource description, like:\n\
# 'package://my_pkg/meshes/some_mesh.dae'\n\
string mesh\n\
\n\
# Only used if type==URDF_BODY, otherwise ignored.\n\
# Needs to comply with the URDF definition from here:\n\
# http://wiki.ros.org/urdf/XML\n\
string urdf\n\
# Only used if type==URDF_BODY, otherwise ignored.\n\
# Optional, can be left empty.\n\
# If not empty, this will interpreted as a ROS topic over which \n\
# message of type sensor_msgs/JointState are communicated that\n\
# contain the current state of all the movable joints described\n\
# in the urdf.\n\
string joint_state_topic\n\
\n\
================================================================================\n\
MSG: shape_msgs/SolidPrimitive\n\
# Define box, sphere, cylinder, cone \n\
# All shapes are defined to have their bounding boxes centered around 0,0,0.\n\
\n\
uint8 BOX=1\n\
uint8 SPHERE=2\n\
uint8 CYLINDER=3\n\
uint8 CONE=4\n\
\n\
# The type of the shape\n\
uint8 type\n\
\n\
\n\
# The dimensions of the shape\n\
float64[] dimensions\n\
\n\
# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n\
\n\
# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n\
# sides of the box.\n\
uint8 BOX_X=0\n\
uint8 BOX_Y=1\n\
uint8 BOX_Z=2\n\
\n\
\n\
# For the SPHERE type, only one component is used, and it gives the radius of\n\
# the sphere.\n\
uint8 SPHERE_RADIUS=0\n\
\n\
\n\
# For the CYLINDER and CONE types, the center line is oriented along\n\
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n\
# of dimensions gives the height of the cylinder (cone).  The\n\
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n\
# radius of the base of the cylinder (cone).  Cone and cylinder\n\
# primitives are defined to be circular. The tip of the cone is\n\
# pointing up, along +Z axis.\n\
\n\
uint8 CYLINDER_HEIGHT=0\n\
uint8 CYLINDER_RADIUS=1\n\
\n\
uint8 CONE_HEIGHT=0\n\
uint8 CONE_RADIUS=1\n\
";
  }

  static const char* value(const ::giskard_msgs::WorldBody_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::WorldBody_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.shape);
      stream.next(m.mesh);
      stream.next(m.urdf);
      stream.next(m.joint_state_topic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldBody_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::WorldBody_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::WorldBody_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::shape_msgs::SolidPrimitive_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
    s << indent << "mesh: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mesh);
    s << indent << "urdf: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.urdf);
    s << indent << "joint_state_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_state_topic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_WORLDBODY_H
