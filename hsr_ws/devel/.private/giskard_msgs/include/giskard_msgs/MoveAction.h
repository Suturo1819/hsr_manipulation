// Generated by gencpp from file giskard_msgs/MoveAction.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_MOVEACTION_H
#define GISKARD_MSGS_MESSAGE_MOVEACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <giskard_msgs/MoveActionGoal.h>
#include <giskard_msgs/MoveActionResult.h>
#include <giskard_msgs/MoveActionFeedback.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct MoveAction_
{
  typedef MoveAction_<ContainerAllocator> Type;

  MoveAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  MoveAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::giskard_msgs::MoveActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::giskard_msgs::MoveActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::giskard_msgs::MoveActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::giskard_msgs::MoveAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::MoveAction_<ContainerAllocator> const> ConstPtr;

}; // struct MoveAction_

typedef ::giskard_msgs::MoveAction_<std::allocator<void> > MoveAction;

typedef boost::shared_ptr< ::giskard_msgs::MoveAction > MoveActionPtr;
typedef boost::shared_ptr< ::giskard_msgs::MoveAction const> MoveActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::MoveAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::MoveAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::MoveAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::MoveAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::MoveAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7701641eee3d025349554d8d4d5b4d6a";
  }

  static const char* value(const ::giskard_msgs::MoveAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7701641eee3d0253ULL;
  static const uint64_t static_value2 = 0x49554d8d4d5b4d6aULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/MoveAction";
  }

  static const char* value(const ::giskard_msgs::MoveAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::MoveAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
MoveActionGoal action_goal\n\
MoveActionResult action_result\n\
MoveActionFeedback action_feedback\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveActionGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
MoveGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal\n\
\n\
# definitions of possible values to use as type\n\
uint8 UNDEFINED=0\n\
uint8 PLAN_AND_EXECUTE=1\n\
uint8 PLAN_ONLY=2\n\
\n\
# use one of the above constants to indicate the goal type\n\
uint8 type\n\
\n\
# sequence of movement commands to execute\n\
giskard_msgs/MoveCmd[] cmd_seq\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveCmd\n\
# Set of controllers that need to converge for this command to finish\n\
giskard_msgs/Controller[] controllers\n\
\n\
# Set of special collision states that shall hold during the movement\n\
giskard_msgs/CollisionEntry[] collisions\n\
\n\
================================================================================\n\
MSG: giskard_msgs/Controller\n\
# definitions of possible values to use as type\n\
uint8 UNDEFINED=0\n\
uint8 JOINT=1\n\
uint8 TRANSLATION_3D=2\n\
uint8 ROTATION_3D=3\n\
\n\
# use of the above constants to indicate the type of controller\n\
uint8 type\n\
\n\
# Name of the link that is at the start of the controlled kinematic chain\n\
string root_link\n\
\n\
# Name of the link that is at the end of the controlled kinematic chain\n\
string tip_link \n\
\n\
# Proportional gain used by the controller\n\
float64 p_gain\n\
\n\
# Weight assigned to the controller within the cost-function solved in each cycle\n\
float64 weight\n\
\n\
# Maximum speed\n\
# m/s if type==TRANSLATION_3D\n\
# rad/s if type==ROTATION_3D\n\
# min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT\n\
float64 max_speed\n\
\n\
# controller goal, interpretation depends on value in type field\n\
# JOINT: ignores this field\n\
# TRANSLATION_3D: desired translation of tip_link relative to root_link\n\
# ROTATION_3D: desired orientation of tip_link relative to root_link\n\
geometry_msgs/PoseStamped goal_pose\n\
\n\
# controller goal, interpretation depends on value in type field\n\
# JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link\n\
# TRANSLATION_3D: ignores this field\n\
# ROTATION_3D: ignores this field\n\
sensor_msgs/JointState goal_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: giskard_msgs/CollisionEntry\n\
# definitions of possible collision types to use for value\n\
uint8 AVOID_COLLISION=0\n\
uint8 ALLOW_COLLISION=1\n\
uint8 AVOID_ALL_COLLISIONS=2\n\
uint8 ALLOW_ALL_COLLISIONS=3\n\
\n\
# use one of the above constants as collision type\n\
uint8 type\n\
\n\
# enforced minimum distance between the closest points on both surfaces\n\
float64 min_dist\n\
\n\
# link of the controlled robot, if left empty all links will be selected\n\
string[] robot_links\n\
\n\
# name of body B, i.e. the second body in the described collision, can also be the controlled robot\n\
string body_b\n\
# optional: link of the particular link on body B\n\
## note: only works if body B is a multibody with a link with that name\n\
# note: if left empty, the entire body B is selected\n\
string[] link_bs\n\
\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveActionResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
MoveResult result\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# result\n\
# definition of possible error code values\n\
uint8 SUCCESS=0\n\
uint8 INSOLVABLE=1\n\
uint8 PATH_COLLISION=2\n\
uint8 START_STATE_COLLISION=3\n\
uint8 END_STATE_COLLISION=4\n\
uint8 SOLVER_TIMEOUT=5\n\
uint8 INTERRUPTED=6\n\
uint8 MAX_NWSR_REACHED=7 # increasing NWSR might fix this\n\
uint8 QP_SOLVER_ERROR=8\n\
uint8 UNKNOWN_OBJECT=9\n\
uint8 SYMENGINE_ERROR=10\n\
\n\
# error codes for the overall action goal\n\
uint8 error_code\n\
\n\
# planned trajectory\n\
trajectory_msgs/JointTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
# Each trajectory point specifies either positions[, velocities[, accelerations]]\n\
# or positions[, effort] for the trajectory to be executed.\n\
# All specified values are in the same order as the joint names in JointTrajectory.msg\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveActionFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
MoveFeedback feedback\n\
\n\
================================================================================\n\
MSG: giskard_msgs/MoveFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# feedback\n\
\n\
# definitions of possible action phases\n\
uint8 UNDEFINED=0\n\
uint8 INIT_KINEMATIC_CHAIN=1 # not implemented\n\
uint8 PLANNING=2\n\
uint8 EXECUTION=3\n\
\n\
# action phase that the server currently pursues\n\
uint8 phase\n\
\n\
# value between 0.0 and 1.0 to report progress \n\
# only published during phases EXECUTION\n\
float64 progress\n\
\n\
";
  }

  static const char* value(const ::giskard_msgs::MoveAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::MoveAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::MoveAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::MoveAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::giskard_msgs::MoveActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::giskard_msgs::MoveActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::giskard_msgs::MoveActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_MOVEACTION_H
