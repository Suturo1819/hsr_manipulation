// Generated by gencpp from file giskard_msgs/UpdateWorldResponse.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_UPDATEWORLDRESPONSE_H
#define GISKARD_MSGS_MESSAGE_UPDATEWORLDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace giskard_msgs
{
template <class ContainerAllocator>
struct UpdateWorldResponse_
{
  typedef UpdateWorldResponse_<ContainerAllocator> Type;

  UpdateWorldResponse_()
    : error_codes(0)
    , error_msg()  {
    }
  UpdateWorldResponse_(const ContainerAllocator& _alloc)
    : error_codes(0)
    , error_msg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _error_codes_type;
  _error_codes_type error_codes;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_msg_type;
  _error_msg_type error_msg;



  enum {
    SUCCESS = 0u,
    MISSING_BODY_ERROR = 1u,
    DUPLICATE_BODY_ERROR = 2u,
    CORRUPT_SHAPE_ERROR = 3u,
    CORRUPT_MESH_ERROR = 4u,
    CORRUPT_URDF_ERROR = 5u,
    TF_ERROR = 6u,
    MISSING_LINK_ERROR = 7u,
    INVALID_OPERATION = 8u,
    UNSUPPORTED_OPTIONS = 9u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateWorldResponse_

typedef ::giskard_msgs::UpdateWorldResponse_<std::allocator<void> > UpdateWorldResponse;

typedef boost::shared_ptr< ::giskard_msgs::UpdateWorldResponse > UpdateWorldResponsePtr;
typedef boost::shared_ptr< ::giskard_msgs::UpdateWorldResponse const> UpdateWorldResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67d5bb7a907694dba035c5fe9db7da83";
  }

  static const char* value(const ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67d5bb7a907694dbULL;
  static const uint64_t static_value2 = 0xa035c5fe9db7da83ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/UpdateWorldResponse";
  }

  static const char* value(const ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
uint8 SUCCESS=0\n\
uint8 MISSING_BODY_ERROR=1\n\
uint8 DUPLICATE_BODY_ERROR=2\n\
uint8 CORRUPT_SHAPE_ERROR=3\n\
uint8 CORRUPT_MESH_ERROR=4\n\
uint8 CORRUPT_URDF_ERROR=5\n\
uint8 TF_ERROR=6\n\
uint8 MISSING_LINK_ERROR=7\n\
uint8 INVALID_OPERATION=8\n\
uint8 UNSUPPORTED_OPTIONS=9\n\
\n\
\n\
uint8 error_codes\n\
\n\
\n\
string error_msg\n\
\n\
";
  }

  static const char* value(const ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_codes);
      stream.next(m.error_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateWorldResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::UpdateWorldResponse_<ContainerAllocator>& v)
  {
    s << indent << "error_codes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_codes);
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_UPDATEWORLDRESPONSE_H
