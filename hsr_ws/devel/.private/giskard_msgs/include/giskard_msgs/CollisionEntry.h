// Generated by gencpp from file giskard_msgs/CollisionEntry.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_COLLISIONENTRY_H
#define GISKARD_MSGS_MESSAGE_COLLISIONENTRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace giskard_msgs
{
template <class ContainerAllocator>
struct CollisionEntry_
{
  typedef CollisionEntry_<ContainerAllocator> Type;

  CollisionEntry_()
    : type(0)
    , min_dist(0.0)
    , robot_links()
    , body_b()
    , link_bs()  {
    }
  CollisionEntry_(const ContainerAllocator& _alloc)
    : type(0)
    , min_dist(0.0)
    , robot_links(_alloc)
    , body_b(_alloc)
    , link_bs(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef double _min_dist_type;
  _min_dist_type min_dist;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _robot_links_type;
  _robot_links_type robot_links;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _body_b_type;
  _body_b_type body_b;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _link_bs_type;
  _link_bs_type link_bs;



  enum {
    AVOID_COLLISION = 0u,
    ALLOW_COLLISION = 1u,
    AVOID_ALL_COLLISIONS = 2u,
    ALLOW_ALL_COLLISIONS = 3u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::CollisionEntry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::CollisionEntry_<ContainerAllocator> const> ConstPtr;

}; // struct CollisionEntry_

typedef ::giskard_msgs::CollisionEntry_<std::allocator<void> > CollisionEntry;

typedef boost::shared_ptr< ::giskard_msgs::CollisionEntry > CollisionEntryPtr;
typedef boost::shared_ptr< ::giskard_msgs::CollisionEntry const> CollisionEntryConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::CollisionEntry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::CollisionEntry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::CollisionEntry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::CollisionEntry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c58e7dbe61bb1840e7343233a9d145c";
  }

  static const char* value(const ::giskard_msgs::CollisionEntry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c58e7dbe61bb184ULL;
  static const uint64_t static_value2 = 0x0e7343233a9d145cULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/CollisionEntry";
  }

  static const char* value(const ::giskard_msgs::CollisionEntry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# definitions of possible collision types to use for value\n\
uint8 AVOID_COLLISION=0\n\
uint8 ALLOW_COLLISION=1\n\
uint8 AVOID_ALL_COLLISIONS=2\n\
uint8 ALLOW_ALL_COLLISIONS=3\n\
\n\
# use one of the above constants as collision type\n\
uint8 type\n\
\n\
# enforced minimum distance between the closest points on both surfaces\n\
float64 min_dist\n\
\n\
# link of the controlled robot, if left empty all links will be selected\n\
string[] robot_links\n\
\n\
# name of body B, i.e. the second body in the described collision, can also be the controlled robot\n\
string body_b\n\
# optional: link of the particular link on body B\n\
## note: only works if body B is a multibody with a link with that name\n\
# note: if left empty, the entire body B is selected\n\
string[] link_bs\n\
\n\
";
  }

  static const char* value(const ::giskard_msgs::CollisionEntry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.min_dist);
      stream.next(m.robot_links);
      stream.next(m.body_b);
      stream.next(m.link_bs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisionEntry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::CollisionEntry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::CollisionEntry_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "min_dist: ";
    Printer<double>::stream(s, indent + "  ", v.min_dist);
    s << indent << "robot_links[]" << std::endl;
    for (size_t i = 0; i < v.robot_links.size(); ++i)
    {
      s << indent << "  robot_links[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_links[i]);
    }
    s << indent << "body_b: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.body_b);
    s << indent << "link_bs[]" << std::endl;
    for (size_t i = 0; i < v.link_bs.size(); ++i)
    {
      s << indent << "  link_bs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_bs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_COLLISIONENTRY_H
