// Generated by gencpp from file giskard_msgs/Task.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_TASK_H
#define GISKARD_MSGS_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <giskard_msgs/TaskObject.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : type()
    , objects()
    , pour_volume(0.0)  {
    }
  Task_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , objects(_alloc)
    , pour_volume(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector< ::giskard_msgs::TaskObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::giskard_msgs::TaskObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef double _pour_volume_type;
  _pour_volume_type pour_volume;





  typedef boost::shared_ptr< ::giskard_msgs::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::giskard_msgs::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::giskard_msgs::Task > TaskPtr;
typedef boost::shared_ptr< ::giskard_msgs::Task const> TaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e32762b7c3b4d6c977fae7bf0e0a0db";
  }

  static const char* value(const ::giskard_msgs::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e32762b7c3b4d6cULL;
  static const uint64_t static_value2 = 0x977fae7bf0e0a0dbULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/Task";
  }

  static const char* value(const ::giskard_msgs::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# identifier of the task type\n\
string type\n\
\n\
# objects involved in the action\n\
giskard_msgs/TaskObject[] objects\n\
\n\
# for pouring tasks\n\
float64 pour_volume # in cubic-meters\n\
\n\
================================================================================\n\
MSG: giskard_msgs/TaskObject\n\
# A representation of an object which is part of an action.\n\
# Used for querying task-specific constraints for giskard controllers.\n\
\n\
# definitions of possible values for field 'role'\n\
uint8 INVALID_ROLE=0 # make sure users set a proper role\n\
uint8 SOURCE_ROLE=1 # object acts as the source of the action\n\
uint8 TARGET_ROLE=2 # object acts as the target of the action\n\
\n\
# unique identifier of the object\n\
string name\n\
\n\
# perceived pose of the object\n\
geometry_msgs/PoseStamped pose\n\
\n\
# role the object will play within a task\n\
uint8 role\n\
\n\
# in case the object is filled with a liquid\n\
float64 liquid_volume # in cubic-meters\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::giskard_msgs::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.objects);
      stream.next(m.pour_volume);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::Task_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::giskard_msgs::TaskObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "pour_volume: ";
    Printer<double>::stream(s, indent + "  ", v.pour_volume);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_TASK_H
