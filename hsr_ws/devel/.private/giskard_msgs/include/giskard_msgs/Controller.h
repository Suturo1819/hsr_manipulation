// Generated by gencpp from file giskard_msgs/Controller.msg
// DO NOT EDIT!


#ifndef GISKARD_MSGS_MESSAGE_CONTROLLER_H
#define GISKARD_MSGS_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <sensor_msgs/JointState.h>

namespace giskard_msgs
{
template <class ContainerAllocator>
struct Controller_
{
  typedef Controller_<ContainerAllocator> Type;

  Controller_()
    : type(0)
    , root_link()
    , tip_link()
    , p_gain(0.0)
    , weight(0.0)
    , max_speed(0.0)
    , goal_pose()
    , goal_state()  {
    }
  Controller_(const ContainerAllocator& _alloc)
    : type(0)
    , root_link(_alloc)
    , tip_link(_alloc)
    , p_gain(0.0)
    , weight(0.0)
    , max_speed(0.0)
    , goal_pose(_alloc)
    , goal_state(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _root_link_type;
  _root_link_type root_link;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tip_link_type;
  _tip_link_type tip_link;

   typedef double _p_gain_type;
  _p_gain_type p_gain;

   typedef double _weight_type;
  _weight_type weight;

   typedef double _max_speed_type;
  _max_speed_type max_speed;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _goal_state_type;
  _goal_state_type goal_state;



  enum {
    UNDEFINED = 0u,
    JOINT = 1u,
    TRANSLATION_3D = 2u,
    ROTATION_3D = 3u,
  };


  typedef boost::shared_ptr< ::giskard_msgs::Controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::giskard_msgs::Controller_<ContainerAllocator> const> ConstPtr;

}; // struct Controller_

typedef ::giskard_msgs::Controller_<std::allocator<void> > Controller;

typedef boost::shared_ptr< ::giskard_msgs::Controller > ControllerPtr;
typedef boost::shared_ptr< ::giskard_msgs::Controller const> ControllerConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::giskard_msgs::Controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::giskard_msgs::Controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace giskard_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'giskard_msgs': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/giskard_msgs/msg', '/home/michel/Desktop/suturo/motion/simulation/hsr_ws/devel/.private/giskard_msgs/share/giskard_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::giskard_msgs::Controller_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::giskard_msgs::Controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::giskard_msgs::Controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::giskard_msgs::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "642b5e2147410b76bd7b4f445ffc67f2";
  }

  static const char* value(const ::giskard_msgs::Controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x642b5e2147410b76ULL;
  static const uint64_t static_value2 = 0xbd7b4f445ffc67f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::giskard_msgs::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "giskard_msgs/Controller";
  }

  static const char* value(const ::giskard_msgs::Controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::giskard_msgs::Controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# definitions of possible values to use as type\n\
uint8 UNDEFINED=0\n\
uint8 JOINT=1\n\
uint8 TRANSLATION_3D=2\n\
uint8 ROTATION_3D=3\n\
\n\
# use of the above constants to indicate the type of controller\n\
uint8 type\n\
\n\
# Name of the link that is at the start of the controlled kinematic chain\n\
string root_link\n\
\n\
# Name of the link that is at the end of the controlled kinematic chain\n\
string tip_link \n\
\n\
# Proportional gain used by the controller\n\
float64 p_gain\n\
\n\
# Weight assigned to the controller within the cost-function solved in each cycle\n\
float64 weight\n\
\n\
# Maximum speed\n\
# m/s if type==TRANSLATION_3D\n\
# rad/s if type==ROTATION_3D\n\
# min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT\n\
float64 max_speed\n\
\n\
# controller goal, interpretation depends on value in type field\n\
# JOINT: ignores this field\n\
# TRANSLATION_3D: desired translation of tip_link relative to root_link\n\
# ROTATION_3D: desired orientation of tip_link relative to root_link\n\
geometry_msgs/PoseStamped goal_pose\n\
\n\
# controller goal, interpretation depends on value in type field\n\
# JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link\n\
# TRANSLATION_3D: ignores this field\n\
# ROTATION_3D: ignores this field\n\
sensor_msgs/JointState goal_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
";
  }

  static const char* value(const ::giskard_msgs::Controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::giskard_msgs::Controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.root_link);
      stream.next(m.tip_link);
      stream.next(m.p_gain);
      stream.next(m.weight);
      stream.next(m.max_speed);
      stream.next(m.goal_pose);
      stream.next(m.goal_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::giskard_msgs::Controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::giskard_msgs::Controller_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "root_link: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.root_link);
    s << indent << "tip_link: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tip_link);
    s << indent << "p_gain: ";
    Printer<double>::stream(s, indent + "  ", v.p_gain);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
    s << indent << "max_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed);
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "goal_state: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GISKARD_MSGS_MESSAGE_CONTROLLER_H
