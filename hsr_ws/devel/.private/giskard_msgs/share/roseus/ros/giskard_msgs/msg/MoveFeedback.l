;; Auto-generated. Do not edit!


(when (boundp 'giskard_msgs::MoveFeedback)
  (if (not (find-package "GISKARD_MSGS"))
    (make-package "GISKARD_MSGS"))
  (shadow 'MoveFeedback (find-package "GISKARD_MSGS")))
(unless (find-package "GISKARD_MSGS::MOVEFEEDBACK")
  (make-package "GISKARD_MSGS::MOVEFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude MoveFeedback.msg.html


(intern "*UNDEFINED*" (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(shadow '*UNDEFINED* (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(defconstant giskard_msgs::MoveFeedback::*UNDEFINED* 0)
(intern "*INIT_KINEMATIC_CHAIN*" (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(shadow '*INIT_KINEMATIC_CHAIN* (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(defconstant giskard_msgs::MoveFeedback::*INIT_KINEMATIC_CHAIN* 1)
(intern "*PLANNING*" (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(shadow '*PLANNING* (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(defconstant giskard_msgs::MoveFeedback::*PLANNING* 2)
(intern "*EXECUTION*" (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(shadow '*EXECUTION* (find-package "GISKARD_MSGS::MOVEFEEDBACK"))
(defconstant giskard_msgs::MoveFeedback::*EXECUTION* 3)
(defclass giskard_msgs::MoveFeedback
  :super ros::object
  :slots (_phase _progress ))

(defmethod giskard_msgs::MoveFeedback
  (:init
   (&key
    ((:phase __phase) 0)
    ((:progress __progress) 0.0)
    )
   (send-super :init)
   (setq _phase (round __phase))
   (setq _progress (float __progress))
   self)
  (:phase
   (&optional __phase)
   (if __phase (setq _phase __phase)) _phase)
  (:progress
   (&optional __progress)
   (if __progress (setq _progress __progress)) _progress)
  (:serialization-length
   ()
   (+
    ;; uint8 _phase
    1
    ;; float64 _progress
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _phase
       (write-byte _phase s)
     ;; float64 _progress
       (sys::poke _progress (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _phase
     (setq _phase (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; float64 _progress
     (setq _progress (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get giskard_msgs::MoveFeedback :md5sum-) "ecc6d4879c8c02bbc72b1e25251d42be")
(setf (get giskard_msgs::MoveFeedback :datatype-) "giskard_msgs/MoveFeedback")
(setf (get giskard_msgs::MoveFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback

# definitions of possible action phases
uint8 UNDEFINED=0
uint8 INIT_KINEMATIC_CHAIN=1 # not implemented
uint8 PLANNING=2
uint8 EXECUTION=3

# action phase that the server currently pursues
uint8 phase

# value between 0.0 and 1.0 to report progress 
# only published during phases EXECUTION
float64 progress


")



(provide :giskard_msgs/MoveFeedback "ecc6d4879c8c02bbc72b1e25251d42be")


