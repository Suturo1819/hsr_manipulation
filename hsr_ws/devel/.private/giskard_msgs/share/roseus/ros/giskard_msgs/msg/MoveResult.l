;; Auto-generated. Do not edit!


(when (boundp 'giskard_msgs::MoveResult)
  (if (not (find-package "GISKARD_MSGS"))
    (make-package "GISKARD_MSGS"))
  (shadow 'MoveResult (find-package "GISKARD_MSGS")))
(unless (find-package "GISKARD_MSGS::MOVERESULT")
  (make-package "GISKARD_MSGS::MOVERESULT"))

(in-package "ROS")
;;//! \htmlinclude MoveResult.msg.html
(if (not (find-package "TRAJECTORY_MSGS"))
  (ros::roseus-add-msgs "trajectory_msgs"))


(intern "*SUCCESS*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*SUCCESS* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*SUCCESS* 0)
(intern "*INSOLVABLE*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*INSOLVABLE* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*INSOLVABLE* 1)
(intern "*PATH_COLLISION*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*PATH_COLLISION* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*PATH_COLLISION* 2)
(intern "*START_STATE_COLLISION*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*START_STATE_COLLISION* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*START_STATE_COLLISION* 3)
(intern "*END_STATE_COLLISION*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*END_STATE_COLLISION* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*END_STATE_COLLISION* 4)
(intern "*SOLVER_TIMEOUT*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*SOLVER_TIMEOUT* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*SOLVER_TIMEOUT* 5)
(intern "*INTERRUPTED*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*INTERRUPTED* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*INTERRUPTED* 6)
(intern "*MAX_NWSR_REACHED*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*MAX_NWSR_REACHED* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*MAX_NWSR_REACHED* 7)
(intern "*QP_SOLVER_ERROR*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*QP_SOLVER_ERROR* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*QP_SOLVER_ERROR* 8)
(intern "*UNKNOWN_OBJECT*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*UNKNOWN_OBJECT* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*UNKNOWN_OBJECT* 9)
(intern "*SYMENGINE_ERROR*" (find-package "GISKARD_MSGS::MOVERESULT"))
(shadow '*SYMENGINE_ERROR* (find-package "GISKARD_MSGS::MOVERESULT"))
(defconstant giskard_msgs::MoveResult::*SYMENGINE_ERROR* 10)
(defclass giskard_msgs::MoveResult
  :super ros::object
  :slots (_error_code _trajectory ))

(defmethod giskard_msgs::MoveResult
  (:init
   (&key
    ((:error_code __error_code) 0)
    ((:trajectory __trajectory) (instance trajectory_msgs::JointTrajectory :init))
    )
   (send-super :init)
   (setq _error_code (round __error_code))
   (setq _trajectory __trajectory)
   self)
  (:error_code
   (&optional __error_code)
   (if __error_code (setq _error_code __error_code)) _error_code)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:serialization-length
   ()
   (+
    ;; uint8 _error_code
    1
    ;; trajectory_msgs/JointTrajectory _trajectory
    (send _trajectory :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _error_code
       (write-byte _error_code s)
     ;; trajectory_msgs/JointTrajectory _trajectory
       (send _trajectory :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _error_code
     (setq _error_code (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; trajectory_msgs/JointTrajectory _trajectory
     (send _trajectory :deserialize buf ptr-) (incf ptr- (send _trajectory :serialization-length))
   ;;
   self)
  )

(setf (get giskard_msgs::MoveResult :md5sum-) "30a5ca36aa9d78817486028053bcba3f")
(setf (get giskard_msgs::MoveResult :datatype-) "giskard_msgs/MoveResult")
(setf (get giskard_msgs::MoveResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
# definition of possible error code values
uint8 SUCCESS=0
uint8 INSOLVABLE=1
uint8 PATH_COLLISION=2
uint8 START_STATE_COLLISION=3
uint8 END_STATE_COLLISION=4
uint8 SOLVER_TIMEOUT=5
uint8 INTERRUPTED=6
uint8 MAX_NWSR_REACHED=7 # increasing NWSR might fix this
uint8 QP_SOLVER_ERROR=8
uint8 UNKNOWN_OBJECT=9
uint8 SYMENGINE_ERROR=10

# error codes for the overall action goal
uint8 error_code

# planned trajectory
trajectory_msgs/JointTrajectory trajectory

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

")



(provide :giskard_msgs/MoveResult "30a5ca36aa9d78817486028053bcba3f")


