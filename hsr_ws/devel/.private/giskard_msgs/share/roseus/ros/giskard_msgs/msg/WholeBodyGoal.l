;; Auto-generated. Do not edit!


(when (boundp 'giskard_msgs::WholeBodyGoal)
  (if (not (find-package "GISKARD_MSGS"))
    (make-package "GISKARD_MSGS"))
  (shadow 'WholeBodyGoal (find-package "GISKARD_MSGS")))
(unless (find-package "GISKARD_MSGS::WHOLEBODYGOAL")
  (make-package "GISKARD_MSGS::WHOLEBODYGOAL"))

(in-package "ROS")
;;//! \htmlinclude WholeBodyGoal.msg.html


(defclass giskard_msgs::WholeBodyGoal
  :super ros::object
  :slots (_command ))

(defmethod giskard_msgs::WholeBodyGoal
  (:init
   (&key
    ((:command __command) (instance giskard_msgs::WholeBodyCommand :init))
    )
   (send-super :init)
   (setq _command __command)
   self)
  (:command
   (&rest __command)
   (if (keywordp (car __command))
       (send* _command __command)
     (progn
       (if __command (setq _command (car __command)))
       _command)))
  (:serialization-length
   ()
   (+
    ;; giskard_msgs/WholeBodyCommand _command
    (send _command :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; giskard_msgs/WholeBodyCommand _command
       (send _command :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; giskard_msgs/WholeBodyCommand _command
     (send _command :deserialize buf ptr-) (incf ptr- (send _command :serialization-length))
   ;;
   self)
  )

(setf (get giskard_msgs::WholeBodyGoal :md5sum-) "9b97f32e56852874fece424a12234894")
(setf (get giskard_msgs::WholeBodyGoal :datatype-) "giskard_msgs/WholeBodyGoal")
(setf (get giskard_msgs::WholeBodyGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal
giskard_msgs/WholeBodyCommand command

================================================================================
MSG: giskard_msgs/WholeBodyCommand
# A whole-body command message for a mobile manipulator with a morphology 
# compatible with the PR2 robot. The message was designed to support alternative
# ways of specifying a command.

# definitions of possible values to use as type
uint8 STANDARD_CONTROLLER=0
uint8 YAML_CONTROLLER=1

# use of the above constants to indicate the type of command
uint8 type

# standard controllers
giskard_msgs/ArmCommand right_ee # command for right arm
giskard_msgs/ArmCommand left_ee # command for left arm

# yaml controllers
string yaml_spec # complete specification of controller
giskard_msgs/SemanticFloat64[] convergence_thresholds # thresholds used to decide convergence of motion

================================================================================
MSG: giskard_msgs/ArmCommand
# A command message for robotic manipulators that exposes a couple
# of alternative ways of specifying commands.

# Definitions of possible values used for type
uint8 IGNORE_GOAL=0 # Ignore the rest of this command.
uint8 CARTESIAN_GOAL=1 # Use the PoseStamped.
uint8 JOINT_GOAL=2 # Use the list of floats.

# use one of the above constants to indicate the type of command
uint8 type

# Cartesian goal for the arm.
# Note: The header will be used to resolve goal using tf.
geometry_msgs/PoseStamped goal_pose

# Joint goal for the arm.
float64[] goal_configuration

# List of internal double expressions with thresholds to decide convergence
giskard_msgs/SemanticFloat64[] convergence_thresholds

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: giskard_msgs/SemanticFloat64
# A floating-point with semantics hint attached.
# Note: I know this is not much but better than just the number. ;)

# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.
string semantics
# The actual value communicated.
float64 value

")



(provide :giskard_msgs/WholeBodyGoal "9b97f32e56852874fece424a12234894")


