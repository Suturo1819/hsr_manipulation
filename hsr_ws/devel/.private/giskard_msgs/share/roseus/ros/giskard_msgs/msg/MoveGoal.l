;; Auto-generated. Do not edit!


(when (boundp 'giskard_msgs::MoveGoal)
  (if (not (find-package "GISKARD_MSGS"))
    (make-package "GISKARD_MSGS"))
  (shadow 'MoveGoal (find-package "GISKARD_MSGS")))
(unless (find-package "GISKARD_MSGS::MOVEGOAL")
  (make-package "GISKARD_MSGS::MOVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveGoal.msg.html


(intern "*UNDEFINED*" (find-package "GISKARD_MSGS::MOVEGOAL"))
(shadow '*UNDEFINED* (find-package "GISKARD_MSGS::MOVEGOAL"))
(defconstant giskard_msgs::MoveGoal::*UNDEFINED* 0)
(intern "*PLAN_AND_EXECUTE*" (find-package "GISKARD_MSGS::MOVEGOAL"))
(shadow '*PLAN_AND_EXECUTE* (find-package "GISKARD_MSGS::MOVEGOAL"))
(defconstant giskard_msgs::MoveGoal::*PLAN_AND_EXECUTE* 1)
(intern "*PLAN_ONLY*" (find-package "GISKARD_MSGS::MOVEGOAL"))
(shadow '*PLAN_ONLY* (find-package "GISKARD_MSGS::MOVEGOAL"))
(defconstant giskard_msgs::MoveGoal::*PLAN_ONLY* 2)
(defclass giskard_msgs::MoveGoal
  :super ros::object
  :slots (_type _cmd_seq ))

(defmethod giskard_msgs::MoveGoal
  (:init
   (&key
    ((:type __type) 0)
    ((:cmd_seq __cmd_seq) (let (r) (dotimes (i 0) (push (instance giskard_msgs::MoveCmd :init) r)) r))
    )
   (send-super :init)
   (setq _type (round __type))
   (setq _cmd_seq __cmd_seq)
   self)
  (:type
   (&optional __type)
   (if __type (setq _type __type)) _type)
  (:cmd_seq
   (&rest __cmd_seq)
   (if (keywordp (car __cmd_seq))
       (send* _cmd_seq __cmd_seq)
     (progn
       (if __cmd_seq (setq _cmd_seq (car __cmd_seq)))
       _cmd_seq)))
  (:serialization-length
   ()
   (+
    ;; uint8 _type
    1
    ;; giskard_msgs/MoveCmd[] _cmd_seq
    (apply #'+ (send-all _cmd_seq :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _type
       (write-byte _type s)
     ;; giskard_msgs/MoveCmd[] _cmd_seq
     (write-long (length _cmd_seq) s)
     (dolist (elem _cmd_seq)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _type
     (setq _type (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; giskard_msgs/MoveCmd[] _cmd_seq
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _cmd_seq (let (r) (dotimes (i n) (push (instance giskard_msgs::MoveCmd :init) r)) r))
     (dolist (elem- _cmd_seq)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get giskard_msgs::MoveGoal :md5sum-) "7685ad046c30e10022bb0be6996adff9")
(setf (get giskard_msgs::MoveGoal :datatype-) "giskard_msgs/MoveGoal")
(setf (get giskard_msgs::MoveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal

# definitions of possible values to use as type
uint8 UNDEFINED=0
uint8 PLAN_AND_EXECUTE=1
uint8 PLAN_ONLY=2

# use one of the above constants to indicate the goal type
uint8 type

# sequence of movement commands to execute
giskard_msgs/MoveCmd[] cmd_seq

================================================================================
MSG: giskard_msgs/MoveCmd
# Set of controllers that need to converge for this command to finish
giskard_msgs/Controller[] controllers

# Set of special collision states that shall hold during the movement
giskard_msgs/CollisionEntry[] collisions

================================================================================
MSG: giskard_msgs/Controller
# definitions of possible values to use as type
uint8 UNDEFINED=0
uint8 JOINT=1
uint8 TRANSLATION_3D=2
uint8 ROTATION_3D=3

# use of the above constants to indicate the type of controller
uint8 type

# Name of the link that is at the start of the controlled kinematic chain
string root_link

# Name of the link that is at the end of the controlled kinematic chain
string tip_link 

# Proportional gain used by the controller
float64 p_gain

# Weight assigned to the controller within the cost-function solved in each cycle
float64 weight

# Maximum speed
# m/s if type==TRANSLATION_3D
# rad/s if type==ROTATION_3D
# min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT
float64 max_speed

# controller goal, interpretation depends on value in type field
# JOINT: ignores this field
# TRANSLATION_3D: desired translation of tip_link relative to root_link
# ROTATION_3D: desired orientation of tip_link relative to root_link
geometry_msgs/PoseStamped goal_pose

# controller goal, interpretation depends on value in type field
# JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link
# TRANSLATION_3D: ignores this field
# ROTATION_3D: ignores this field
sensor_msgs/JointState goal_state

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: giskard_msgs/CollisionEntry
# definitions of possible collision types to use for value
uint8 AVOID_COLLISION=0
uint8 ALLOW_COLLISION=1
uint8 AVOID_ALL_COLLISIONS=2
uint8 ALLOW_ALL_COLLISIONS=3

# use one of the above constants as collision type
uint8 type

# enforced minimum distance between the closest points on both surfaces
float64 min_dist

# link of the controlled robot, if left empty all links will be selected
string[] robot_links

# name of body B, i.e. the second body in the described collision, can also be the controlled robot
string body_b
# optional: link of the particular link on body B
## note: only works if body B is a multibody with a link with that name
# note: if left empty, the entire body B is selected
string[] link_bs


")



(provide :giskard_msgs/MoveGoal "7685ad046c30e10022bb0be6996adff9")


