// Auto-generated. Do not edit!

// (in-package giskard_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ControllerListActionGoal = require('./ControllerListActionGoal.js');
let ControllerListActionResult = require('./ControllerListActionResult.js');
let ControllerListActionFeedback = require('./ControllerListActionFeedback.js');

//-----------------------------------------------------------

class ControllerListAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new ControllerListActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new ControllerListActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new ControllerListActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ControllerListAction
    // Serialize message field [action_goal]
    bufferOffset = ControllerListActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = ControllerListActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = ControllerListActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ControllerListAction
    let len;
    let data = new ControllerListAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = ControllerListActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = ControllerListActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = ControllerListActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += ControllerListActionGoal.getMessageSize(object.action_goal);
    length += ControllerListActionResult.getMessageSize(object.action_result);
    length += ControllerListActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'giskard_msgs/ControllerListAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '7c51059c89604bf8d8a2f4497e225cfa';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    ControllerListActionGoal action_goal
    ControllerListActionResult action_result
    ControllerListActionFeedback action_feedback
    
    ================================================================================
    MSG: giskard_msgs/ControllerListActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    ControllerListGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: giskard_msgs/ControllerListGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal message
    
    # definitions of possible values to use as type
    uint8 STANDARD_CONTROLLER=0
    uint8 YAML_CONTROLLER=1
    
    # use of the above constants to indicate the type of command
    uint8 type
    
    # list of controller specifications to run
    # will only be interpreted if type==STANDARD_CONTROLLER
    giskard_msgs/Controller[] controllers
    
    # YAML description of a controller to run
    # will only be interpreted if type==YAML_CONTROLLER
    string yaml
    
    ================================================================================
    MSG: giskard_msgs/Controller
    # definitions of possible values to use as type
    uint8 UNDEFINED=0
    uint8 JOINT=1
    uint8 TRANSLATION_3D=2
    uint8 ROTATION_3D=3
    
    # use of the above constants to indicate the type of controller
    uint8 type
    
    # Name of the link that is at the start of the controlled kinematic chain
    string root_link
    
    # Name of the link that is at the end of the controlled kinematic chain
    string tip_link 
    
    # Proportional gain used by the controller
    float64 p_gain
    
    # Weight assigned to the controller within the cost-function solved in each cycle
    float64 weight
    
    # Maximum speed
    # m/s if type==TRANSLATION_3D
    # rad/s if type==ROTATION_3D
    # min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT
    float64 max_speed
    
    # controller goal, interpretation depends on value in type field
    # JOINT: ignores this field
    # TRANSLATION_3D: desired translation of tip_link relative to root_link
    # ROTATION_3D: desired orientation of tip_link relative to root_link
    geometry_msgs/PoseStamped goal_pose
    
    # controller goal, interpretation depends on value in type field
    # JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link
    # TRANSLATION_3D: ignores this field
    # ROTATION_3D: ignores this field
    sensor_msgs/JointState goal_state
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: sensor_msgs/JointState
    # This is a message that holds data to describe the state of a set of torque controlled joints. 
    #
    # The state of each joint (revolute or prismatic) is defined by:
    #  * the position of the joint (rad or m),
    #  * the velocity of the joint (rad/s or m/s) and 
    #  * the effort that is applied in the joint (Nm or N).
    #
    # Each joint is uniquely identified by its name
    # The header specifies the time at which the joint states were recorded. All the joint states
    # in one message have to be recorded at the same time.
    #
    # This message consists of a multiple arrays, one for each part of the joint state. 
    # The goal is to make each of the fields optional. When e.g. your joints have no
    # effort associated with them, you can leave the effort array empty. 
    #
    # All arrays in this message should have the same size, or be empty.
    # This is the only way to uniquely associate the joint name with the correct
    # states.
    
    
    Header header
    
    string[] name
    float64[] position
    float64[] velocity
    float64[] effort
    
    ================================================================================
    MSG: giskard_msgs/ControllerListActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    ControllerListResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: giskard_msgs/ControllerListResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # result message
    
    # set to true iff generation and execution of all controllers was successful
    bool success
    # reports an message if unsuccessful, typically the message from an internal exception
    string error_message
    
    ================================================================================
    MSG: giskard_msgs/ControllerListActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    ControllerListFeedback feedback
    
    ================================================================================
    MSG: giskard_msgs/ControllerListFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # feedback message
    
    # value between 0.0 and 1.0 that reports progress towards achieving the controller goals
    float64 progress
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ControllerListAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = ControllerListActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new ControllerListActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = ControllerListActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new ControllerListActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = ControllerListActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new ControllerListActionFeedback()
    }

    return resolved;
    }
};

module.exports = ControllerListAction;
