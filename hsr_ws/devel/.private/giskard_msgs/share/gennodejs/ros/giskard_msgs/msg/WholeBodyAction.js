// Auto-generated. Do not edit!

// (in-package giskard_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let WholeBodyActionGoal = require('./WholeBodyActionGoal.js');
let WholeBodyActionResult = require('./WholeBodyActionResult.js');
let WholeBodyActionFeedback = require('./WholeBodyActionFeedback.js');

//-----------------------------------------------------------

class WholeBodyAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new WholeBodyActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new WholeBodyActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new WholeBodyActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type WholeBodyAction
    // Serialize message field [action_goal]
    bufferOffset = WholeBodyActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = WholeBodyActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = WholeBodyActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type WholeBodyAction
    let len;
    let data = new WholeBodyAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = WholeBodyActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = WholeBodyActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = WholeBodyActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += WholeBodyActionGoal.getMessageSize(object.action_goal);
    length += WholeBodyActionResult.getMessageSize(object.action_result);
    length += WholeBodyActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'giskard_msgs/WholeBodyAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'b6d721ef4e59ae306e089e26c778d0a2';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    WholeBodyActionGoal action_goal
    WholeBodyActionResult action_result
    WholeBodyActionFeedback action_feedback
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    WholeBodyGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal
    giskard_msgs/WholeBodyCommand command
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyCommand
    # A whole-body command message for a mobile manipulator with a morphology 
    # compatible with the PR2 robot. The message was designed to support alternative
    # ways of specifying a command.
    
    # definitions of possible values to use as type
    uint8 STANDARD_CONTROLLER=0
    uint8 YAML_CONTROLLER=1
    
    # use of the above constants to indicate the type of command
    uint8 type
    
    # standard controllers
    giskard_msgs/ArmCommand right_ee # command for right arm
    giskard_msgs/ArmCommand left_ee # command for left arm
    
    # yaml controllers
    string yaml_spec # complete specification of controller
    giskard_msgs/SemanticFloat64[] convergence_thresholds # thresholds used to decide convergence of motion
    
    ================================================================================
    MSG: giskard_msgs/ArmCommand
    # A command message for robotic manipulators that exposes a couple
    # of alternative ways of specifying commands.
    
    # Definitions of possible values used for type
    uint8 IGNORE_GOAL=0 # Ignore the rest of this command.
    uint8 CARTESIAN_GOAL=1 # Use the PoseStamped.
    uint8 JOINT_GOAL=2 # Use the list of floats.
    
    # use one of the above constants to indicate the type of command
    uint8 type
    
    # Cartesian goal for the arm.
    # Note: The header will be used to resolve goal using tf.
    geometry_msgs/PoseStamped goal_pose
    
    # Joint goal for the arm.
    float64[] goal_configuration
    
    # List of internal double expressions with thresholds to decide convergence
    giskard_msgs/SemanticFloat64[] convergence_thresholds
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: giskard_msgs/SemanticFloat64
    # A floating-point with semantics hint attached.
    # Note: I know this is not much but better than just the number. ;)
    
    # Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.
    string semantics
    # The actual value communicated.
    float64 value
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    WholeBodyResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # result
    giskard_msgs/WholeBodyState state
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyState
    # only using timestamp for the moment
    std_msgs/Header header
    
    # feature values used to make decisions about succeeded actions
    duration running_time
    float64 left_arm_max_vel
    float64 right_arm_max_vel
    float64 torso_vel
    giskard_msgs/SemanticFloat64[] convergence_values # internal values used to decide convergence
    
    # classification results used to decide whether action succeeded
    bool motion_started # true, as soon low-level controller has started execution the command
    bool motion_old # true, if time passed since start of motion is above threshold
    bool torso_moving # true, if torso velocity is above threshold
    bool left_arm_moving # true, if velocity of any joint of left arm is above threshold
    bool right_arm_moving # true, if velocity of any joint of right arm is above threshold
    giskard_msgs/SemanticBool[] convergence_flags # true, if the corresponding feature values are below a threshold
    
    ================================================================================
    MSG: giskard_msgs/SemanticBool
    # A bool with semantics hint attached.
    # Note: I know this is not much but better than just the bool. ;)
    
    # Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.
    string semantics
    # The actual value communicated.
    bool value
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    WholeBodyFeedback feedback
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # feedback
    giskard_msgs/WholeBodyState state
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new WholeBodyAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = WholeBodyActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new WholeBodyActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = WholeBodyActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new WholeBodyActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = WholeBodyActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new WholeBodyActionFeedback()
    }

    return resolved;
    }
};

module.exports = WholeBodyAction;
