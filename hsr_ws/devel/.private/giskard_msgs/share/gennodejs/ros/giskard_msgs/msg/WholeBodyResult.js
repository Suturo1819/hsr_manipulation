// Auto-generated. Do not edit!

// (in-package giskard_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let WholeBodyState = require('./WholeBodyState.js');

//-----------------------------------------------------------

class WholeBodyResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.state = null;
    }
    else {
      if (initObj.hasOwnProperty('state')) {
        this.state = initObj.state
      }
      else {
        this.state = new WholeBodyState();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type WholeBodyResult
    // Serialize message field [state]
    bufferOffset = WholeBodyState.serialize(obj.state, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type WholeBodyResult
    let len;
    let data = new WholeBodyResult(null);
    // Deserialize message field [state]
    data.state = WholeBodyState.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += WholeBodyState.getMessageSize(object.state);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'giskard_msgs/WholeBodyResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '116144890e2eab71ae9010a22d3d9149';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # result
    giskard_msgs/WholeBodyState state
    
    ================================================================================
    MSG: giskard_msgs/WholeBodyState
    # only using timestamp for the moment
    std_msgs/Header header
    
    # feature values used to make decisions about succeeded actions
    duration running_time
    float64 left_arm_max_vel
    float64 right_arm_max_vel
    float64 torso_vel
    giskard_msgs/SemanticFloat64[] convergence_values # internal values used to decide convergence
    
    # classification results used to decide whether action succeeded
    bool motion_started # true, as soon low-level controller has started execution the command
    bool motion_old # true, if time passed since start of motion is above threshold
    bool torso_moving # true, if torso velocity is above threshold
    bool left_arm_moving # true, if velocity of any joint of left arm is above threshold
    bool right_arm_moving # true, if velocity of any joint of right arm is above threshold
    giskard_msgs/SemanticBool[] convergence_flags # true, if the corresponding feature values are below a threshold
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: giskard_msgs/SemanticFloat64
    # A floating-point with semantics hint attached.
    # Note: I know this is not much but better than just the number. ;)
    
    # Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.
    string semantics
    # The actual value communicated.
    float64 value
    
    ================================================================================
    MSG: giskard_msgs/SemanticBool
    # A bool with semantics hint attached.
    # Note: I know this is not much but better than just the bool. ;)
    
    # Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.
    string semantics
    # The actual value communicated.
    bool value
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new WholeBodyResult(null);
    if (msg.state !== undefined) {
      resolved.state = WholeBodyState.Resolve(msg.state)
    }
    else {
      resolved.state = new WholeBodyState()
    }

    return resolved;
    }
};

module.exports = WholeBodyResult;
