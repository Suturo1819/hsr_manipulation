; Auto-generated. Do not edit!


(cl:in-package giskard_msgs-msg)


;//! \htmlinclude ControllerListAction.msg.html

(cl:defclass <ControllerListAction> (roslisp-msg-protocol:ros-message)
  ((action_goal
    :reader action_goal
    :initarg :action_goal
    :type giskard_msgs-msg:ControllerListActionGoal
    :initform (cl:make-instance 'giskard_msgs-msg:ControllerListActionGoal))
   (action_result
    :reader action_result
    :initarg :action_result
    :type giskard_msgs-msg:ControllerListActionResult
    :initform (cl:make-instance 'giskard_msgs-msg:ControllerListActionResult))
   (action_feedback
    :reader action_feedback
    :initarg :action_feedback
    :type giskard_msgs-msg:ControllerListActionFeedback
    :initform (cl:make-instance 'giskard_msgs-msg:ControllerListActionFeedback)))
)

(cl:defclass ControllerListAction (<ControllerListAction>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <ControllerListAction>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'ControllerListAction)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name giskard_msgs-msg:<ControllerListAction> is deprecated: use giskard_msgs-msg:ControllerListAction instead.")))

(cl:ensure-generic-function 'action_goal-val :lambda-list '(m))
(cl:defmethod action_goal-val ((m <ControllerListAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_goal-val is deprecated.  Use giskard_msgs-msg:action_goal instead.")
  (action_goal m))

(cl:ensure-generic-function 'action_result-val :lambda-list '(m))
(cl:defmethod action_result-val ((m <ControllerListAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_result-val is deprecated.  Use giskard_msgs-msg:action_result instead.")
  (action_result m))

(cl:ensure-generic-function 'action_feedback-val :lambda-list '(m))
(cl:defmethod action_feedback-val ((m <ControllerListAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_feedback-val is deprecated.  Use giskard_msgs-msg:action_feedback instead.")
  (action_feedback m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <ControllerListAction>) ostream)
  "Serializes a message object of type '<ControllerListAction>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_goal) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_result) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_feedback) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <ControllerListAction>) istream)
  "Deserializes a message object of type '<ControllerListAction>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_goal) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_result) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_feedback) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<ControllerListAction>)))
  "Returns string type for a message object of type '<ControllerListAction>"
  "giskard_msgs/ControllerListAction")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'ControllerListAction)))
  "Returns string type for a message object of type 'ControllerListAction"
  "giskard_msgs/ControllerListAction")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<ControllerListAction>)))
  "Returns md5sum for a message object of type '<ControllerListAction>"
  "7c51059c89604bf8d8a2f4497e225cfa")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'ControllerListAction)))
  "Returns md5sum for a message object of type 'ControllerListAction"
  "7c51059c89604bf8d8a2f4497e225cfa")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<ControllerListAction>)))
  "Returns full string definition for message of type '<ControllerListAction>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%ControllerListActionGoal action_goal~%ControllerListActionResult action_result~%ControllerListActionFeedback action_feedback~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%ControllerListGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: giskard_msgs/ControllerListGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# goal message~%~%# definitions of possible values to use as type~%uint8 STANDARD_CONTROLLER=0~%uint8 YAML_CONTROLLER=1~%~%# use of the above constants to indicate the type of command~%uint8 type~%~%# list of controller specifications to run~%# will only be interpreted if type==STANDARD_CONTROLLER~%giskard_msgs/Controller[] controllers~%~%# YAML description of a controller to run~%# will only be interpreted if type==YAML_CONTROLLER~%string yaml~%~%================================================================================~%MSG: giskard_msgs/Controller~%# definitions of possible values to use as type~%uint8 UNDEFINED=0~%uint8 JOINT=1~%uint8 TRANSLATION_3D=2~%uint8 ROTATION_3D=3~%~%# use of the above constants to indicate the type of controller~%uint8 type~%~%# Name of the link that is at the start of the controlled kinematic chain~%string root_link~%~%# Name of the link that is at the end of the controlled kinematic chain~%string tip_link ~%~%# Proportional gain used by the controller~%float64 p_gain~%~%# Weight assigned to the controller within the cost-function solved in each cycle~%float64 weight~%~%# Maximum speed~%# m/s if type==TRANSLATION_3D~%# rad/s if type==ROTATION_3D~%# min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT~%float64 max_speed~%~%# controller goal, interpretation depends on value in type field~%# JOINT: ignores this field~%# TRANSLATION_3D: desired translation of tip_link relative to root_link~%# ROTATION_3D: desired orientation of tip_link relative to root_link~%geometry_msgs/PoseStamped goal_pose~%~%# controller goal, interpretation depends on value in type field~%# JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link~%# TRANSLATION_3D: ignores this field~%# ROTATION_3D: ignores this field~%sensor_msgs/JointState goal_state~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%ControllerListResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: giskard_msgs/ControllerListResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# result message~%~%# set to true iff generation and execution of all controllers was successful~%bool success~%# reports an message if unsuccessful, typically the message from an internal exception~%string error_message~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%ControllerListFeedback feedback~%~%================================================================================~%MSG: giskard_msgs/ControllerListFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# feedback message~%~%# value between 0.0 and 1.0 that reports progress towards achieving the controller goals~%float64 progress~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'ControllerListAction)))
  "Returns full string definition for message of type 'ControllerListAction"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%ControllerListActionGoal action_goal~%ControllerListActionResult action_result~%ControllerListActionFeedback action_feedback~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%ControllerListGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: giskard_msgs/ControllerListGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# goal message~%~%# definitions of possible values to use as type~%uint8 STANDARD_CONTROLLER=0~%uint8 YAML_CONTROLLER=1~%~%# use of the above constants to indicate the type of command~%uint8 type~%~%# list of controller specifications to run~%# will only be interpreted if type==STANDARD_CONTROLLER~%giskard_msgs/Controller[] controllers~%~%# YAML description of a controller to run~%# will only be interpreted if type==YAML_CONTROLLER~%string yaml~%~%================================================================================~%MSG: giskard_msgs/Controller~%# definitions of possible values to use as type~%uint8 UNDEFINED=0~%uint8 JOINT=1~%uint8 TRANSLATION_3D=2~%uint8 ROTATION_3D=3~%~%# use of the above constants to indicate the type of controller~%uint8 type~%~%# Name of the link that is at the start of the controlled kinematic chain~%string root_link~%~%# Name of the link that is at the end of the controlled kinematic chain~%string tip_link ~%~%# Proportional gain used by the controller~%float64 p_gain~%~%# Weight assigned to the controller within the cost-function solved in each cycle~%float64 weight~%~%# Maximum speed~%# m/s if type==TRANSLATION_3D~%# rad/s if type==ROTATION_3D~%# min(max_speed, joint_velocity_limit_specified_in_urdf) if type==JOINT~%float64 max_speed~%~%# controller goal, interpretation depends on value in type field~%# JOINT: ignores this field~%# TRANSLATION_3D: desired translation of tip_link relative to root_link~%# ROTATION_3D: desired orientation of tip_link relative to root_link~%geometry_msgs/PoseStamped goal_pose~%~%# controller goal, interpretation depends on value in type field~%# JOINT: reads the position values for all joints in the kinematic chain between root_link and tip_link~%# TRANSLATION_3D: ignores this field~%# ROTATION_3D: ignores this field~%sensor_msgs/JointState goal_state~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%ControllerListResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: giskard_msgs/ControllerListResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# result message~%~%# set to true iff generation and execution of all controllers was successful~%bool success~%# reports an message if unsuccessful, typically the message from an internal exception~%string error_message~%~%================================================================================~%MSG: giskard_msgs/ControllerListActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%ControllerListFeedback feedback~%~%================================================================================~%MSG: giskard_msgs/ControllerListFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# feedback message~%~%# value between 0.0 and 1.0 that reports progress towards achieving the controller goals~%float64 progress~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <ControllerListAction>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_goal))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_result))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_feedback))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <ControllerListAction>))
  "Converts a ROS message object to a list"
  (cl:list 'ControllerListAction
    (cl:cons ':action_goal (action_goal msg))
    (cl:cons ':action_result (action_result msg))
    (cl:cons ':action_feedback (action_feedback msg))
))
