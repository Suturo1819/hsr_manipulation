; Auto-generated. Do not edit!


(cl:in-package giskard_msgs-msg)


;//! \htmlinclude WholeBodyAction.msg.html

(cl:defclass <WholeBodyAction> (roslisp-msg-protocol:ros-message)
  ((action_goal
    :reader action_goal
    :initarg :action_goal
    :type giskard_msgs-msg:WholeBodyActionGoal
    :initform (cl:make-instance 'giskard_msgs-msg:WholeBodyActionGoal))
   (action_result
    :reader action_result
    :initarg :action_result
    :type giskard_msgs-msg:WholeBodyActionResult
    :initform (cl:make-instance 'giskard_msgs-msg:WholeBodyActionResult))
   (action_feedback
    :reader action_feedback
    :initarg :action_feedback
    :type giskard_msgs-msg:WholeBodyActionFeedback
    :initform (cl:make-instance 'giskard_msgs-msg:WholeBodyActionFeedback)))
)

(cl:defclass WholeBodyAction (<WholeBodyAction>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <WholeBodyAction>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'WholeBodyAction)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name giskard_msgs-msg:<WholeBodyAction> is deprecated: use giskard_msgs-msg:WholeBodyAction instead.")))

(cl:ensure-generic-function 'action_goal-val :lambda-list '(m))
(cl:defmethod action_goal-val ((m <WholeBodyAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_goal-val is deprecated.  Use giskard_msgs-msg:action_goal instead.")
  (action_goal m))

(cl:ensure-generic-function 'action_result-val :lambda-list '(m))
(cl:defmethod action_result-val ((m <WholeBodyAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_result-val is deprecated.  Use giskard_msgs-msg:action_result instead.")
  (action_result m))

(cl:ensure-generic-function 'action_feedback-val :lambda-list '(m))
(cl:defmethod action_feedback-val ((m <WholeBodyAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader giskard_msgs-msg:action_feedback-val is deprecated.  Use giskard_msgs-msg:action_feedback instead.")
  (action_feedback m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <WholeBodyAction>) ostream)
  "Serializes a message object of type '<WholeBodyAction>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_goal) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_result) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_feedback) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <WholeBodyAction>) istream)
  "Deserializes a message object of type '<WholeBodyAction>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_goal) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_result) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_feedback) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<WholeBodyAction>)))
  "Returns string type for a message object of type '<WholeBodyAction>"
  "giskard_msgs/WholeBodyAction")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'WholeBodyAction)))
  "Returns string type for a message object of type 'WholeBodyAction"
  "giskard_msgs/WholeBodyAction")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<WholeBodyAction>)))
  "Returns md5sum for a message object of type '<WholeBodyAction>"
  "b6d721ef4e59ae306e089e26c778d0a2")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'WholeBodyAction)))
  "Returns md5sum for a message object of type 'WholeBodyAction"
  "b6d721ef4e59ae306e089e26c778d0a2")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<WholeBodyAction>)))
  "Returns full string definition for message of type '<WholeBodyAction>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%WholeBodyActionGoal action_goal~%WholeBodyActionResult action_result~%WholeBodyActionFeedback action_feedback~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%WholeBodyGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: giskard_msgs/WholeBodyGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# goal~%giskard_msgs/WholeBodyCommand command~%~%================================================================================~%MSG: giskard_msgs/WholeBodyCommand~%# A whole-body command message for a mobile manipulator with a morphology ~%# compatible with the PR2 robot. The message was designed to support alternative~%# ways of specifying a command.~%~%# definitions of possible values to use as type~%uint8 STANDARD_CONTROLLER=0~%uint8 YAML_CONTROLLER=1~%~%# use of the above constants to indicate the type of command~%uint8 type~%~%# standard controllers~%giskard_msgs/ArmCommand right_ee # command for right arm~%giskard_msgs/ArmCommand left_ee # command for left arm~%~%# yaml controllers~%string yaml_spec # complete specification of controller~%giskard_msgs/SemanticFloat64[] convergence_thresholds # thresholds used to decide convergence of motion~%~%================================================================================~%MSG: giskard_msgs/ArmCommand~%# A command message for robotic manipulators that exposes a couple~%# of alternative ways of specifying commands.~%~%# Definitions of possible values used for type~%uint8 IGNORE_GOAL=0 # Ignore the rest of this command.~%uint8 CARTESIAN_GOAL=1 # Use the PoseStamped.~%uint8 JOINT_GOAL=2 # Use the list of floats.~%~%# use one of the above constants to indicate the type of command~%uint8 type~%~%# Cartesian goal for the arm.~%# Note: The header will be used to resolve goal using tf.~%geometry_msgs/PoseStamped goal_pose~%~%# Joint goal for the arm.~%float64[] goal_configuration~%~%# List of internal double expressions with thresholds to decide convergence~%giskard_msgs/SemanticFloat64[] convergence_thresholds~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: giskard_msgs/SemanticFloat64~%# A floating-point with semantics hint attached.~%# Note: I know this is not much but better than just the number. ;)~%~%# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.~%string semantics~%# The actual value communicated.~%float64 value~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%WholeBodyResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: giskard_msgs/WholeBodyResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# result~%giskard_msgs/WholeBodyState state~%~%================================================================================~%MSG: giskard_msgs/WholeBodyState~%# only using timestamp for the moment~%std_msgs/Header header~%~%# feature values used to make decisions about succeeded actions~%duration running_time~%float64 left_arm_max_vel~%float64 right_arm_max_vel~%float64 torso_vel~%giskard_msgs/SemanticFloat64[] convergence_values # internal values used to decide convergence~%~%# classification results used to decide whether action succeeded~%bool motion_started # true, as soon low-level controller has started execution the command~%bool motion_old # true, if time passed since start of motion is above threshold~%bool torso_moving # true, if torso velocity is above threshold~%bool left_arm_moving # true, if velocity of any joint of left arm is above threshold~%bool right_arm_moving # true, if velocity of any joint of right arm is above threshold~%giskard_msgs/SemanticBool[] convergence_flags # true, if the corresponding feature values are below a threshold~%~%================================================================================~%MSG: giskard_msgs/SemanticBool~%# A bool with semantics hint attached.~%# Note: I know this is not much but better than just the bool. ;)~%~%# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.~%string semantics~%# The actual value communicated.~%bool value~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%WholeBodyFeedback feedback~%~%================================================================================~%MSG: giskard_msgs/WholeBodyFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# feedback~%giskard_msgs/WholeBodyState state~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'WholeBodyAction)))
  "Returns full string definition for message of type 'WholeBodyAction"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%WholeBodyActionGoal action_goal~%WholeBodyActionResult action_result~%WholeBodyActionFeedback action_feedback~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%WholeBodyGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: giskard_msgs/WholeBodyGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# goal~%giskard_msgs/WholeBodyCommand command~%~%================================================================================~%MSG: giskard_msgs/WholeBodyCommand~%# A whole-body command message for a mobile manipulator with a morphology ~%# compatible with the PR2 robot. The message was designed to support alternative~%# ways of specifying a command.~%~%# definitions of possible values to use as type~%uint8 STANDARD_CONTROLLER=0~%uint8 YAML_CONTROLLER=1~%~%# use of the above constants to indicate the type of command~%uint8 type~%~%# standard controllers~%giskard_msgs/ArmCommand right_ee # command for right arm~%giskard_msgs/ArmCommand left_ee # command for left arm~%~%# yaml controllers~%string yaml_spec # complete specification of controller~%giskard_msgs/SemanticFloat64[] convergence_thresholds # thresholds used to decide convergence of motion~%~%================================================================================~%MSG: giskard_msgs/ArmCommand~%# A command message for robotic manipulators that exposes a couple~%# of alternative ways of specifying commands.~%~%# Definitions of possible values used for type~%uint8 IGNORE_GOAL=0 # Ignore the rest of this command.~%uint8 CARTESIAN_GOAL=1 # Use the PoseStamped.~%uint8 JOINT_GOAL=2 # Use the list of floats.~%~%# use one of the above constants to indicate the type of command~%uint8 type~%~%# Cartesian goal for the arm.~%# Note: The header will be used to resolve goal using tf.~%geometry_msgs/PoseStamped goal_pose~%~%# Joint goal for the arm.~%float64[] goal_configuration~%~%# List of internal double expressions with thresholds to decide convergence~%giskard_msgs/SemanticFloat64[] convergence_thresholds~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: giskard_msgs/SemanticFloat64~%# A floating-point with semantics hint attached.~%# Note: I know this is not much but better than just the number. ;)~%~%# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.~%string semantics~%# The actual value communicated.~%float64 value~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%WholeBodyResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: giskard_msgs/WholeBodyResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# result~%giskard_msgs/WholeBodyState state~%~%================================================================================~%MSG: giskard_msgs/WholeBodyState~%# only using timestamp for the moment~%std_msgs/Header header~%~%# feature values used to make decisions about succeeded actions~%duration running_time~%float64 left_arm_max_vel~%float64 right_arm_max_vel~%float64 torso_vel~%giskard_msgs/SemanticFloat64[] convergence_values # internal values used to decide convergence~%~%# classification results used to decide whether action succeeded~%bool motion_started # true, as soon low-level controller has started execution the command~%bool motion_old # true, if time passed since start of motion is above threshold~%bool torso_moving # true, if torso velocity is above threshold~%bool left_arm_moving # true, if velocity of any joint of left arm is above threshold~%bool right_arm_moving # true, if velocity of any joint of right arm is above threshold~%giskard_msgs/SemanticBool[] convergence_flags # true, if the corresponding feature values are below a threshold~%~%================================================================================~%MSG: giskard_msgs/SemanticBool~%# A bool with semantics hint attached.~%# Note: I know this is not much but better than just the bool. ;)~%~%# Hint about the semantics of this number. Examples: frame_id, joint-name, or task dimension.~%string semantics~%# The actual value communicated.~%bool value~%~%================================================================================~%MSG: giskard_msgs/WholeBodyActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%WholeBodyFeedback feedback~%~%================================================================================~%MSG: giskard_msgs/WholeBodyFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# feedback~%giskard_msgs/WholeBodyState state~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <WholeBodyAction>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_goal))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_result))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_feedback))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <WholeBodyAction>))
  "Converts a ROS message object to a list"
  (cl:list 'WholeBodyAction
    (cl:cons ':action_goal (action_goal msg))
    (cl:cons ':action_result (action_result msg))
    (cl:cons ':action_feedback (action_feedback msg))
))
