// Generated by gencpp from file iai_naive_kinematics_sim/ProjectionClock.msg
// DO NOT EDIT!


#ifndef IAI_NAIVE_KINEMATICS_SIM_MESSAGE_PROJECTIONCLOCK_H
#define IAI_NAIVE_KINEMATICS_SIM_MESSAGE_PROJECTIONCLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iai_naive_kinematics_sim
{
template <class ContainerAllocator>
struct ProjectionClock_
{
  typedef ProjectionClock_<ContainerAllocator> Type;

  ProjectionClock_()
    : now()
    , period()  {
    }
  ProjectionClock_(const ContainerAllocator& _alloc)
    : now()
    , period()  {
  (void)_alloc;
    }



   typedef ros::Time _now_type;
  _now_type now;

   typedef ros::Duration _period_type;
  _period_type period;





  typedef boost::shared_ptr< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> const> ConstPtr;

}; // struct ProjectionClock_

typedef ::iai_naive_kinematics_sim::ProjectionClock_<std::allocator<void> > ProjectionClock;

typedef boost::shared_ptr< ::iai_naive_kinematics_sim::ProjectionClock > ProjectionClockPtr;
typedef boost::shared_ptr< ::iai_naive_kinematics_sim::ProjectionClock const> ProjectionClockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iai_naive_kinematics_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'iai_naive_kinematics_sim': ['/home/michel/Desktop/suturo/motion/simulation/hsr_ws/src/iai_naive_kinematics_sim/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "118d0ba873954aeb07014f682079aa06";
  }

  static const char* value(const ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x118d0ba873954aebULL;
  static const uint64_t static_value2 = 0x07014f682079aa06ULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_naive_kinematics_sim/ProjectionClock";
  }

  static const char* value(const ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ProjectionClock messages are used to synchronously advance the clock\n\
# of a set of nodes that provide distributed projection capabilities.\n\
# The original intention was to have it published by a central projection\n\
# management node that acts as a sort of pace-maker for the projection.\n\
\n\
time now         # time equivalent to ros::Time::now(), used to stamp data\n\
duration period  # duration between clock signals, used to advance projections\n\
";
  }

  static const char* value(const ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.now);
      stream.next(m.period);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProjectionClock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_naive_kinematics_sim::ProjectionClock_<ContainerAllocator>& v)
  {
    s << indent << "now: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.now);
    s << indent << "period: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.period);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_NAIVE_KINEMATICS_SIM_MESSAGE_PROJECTIONCLOCK_H
